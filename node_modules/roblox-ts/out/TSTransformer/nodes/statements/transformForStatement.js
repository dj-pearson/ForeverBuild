"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformForStatement = void 0;
const luau_ast_1 = __importDefault(require("@roblox-ts/luau-ast"));
const diagnostics_1 = require("../../../Shared/diagnostics");
const assert_1 = require("../../../Shared/util/assert");
const DiagnosticService_1 = require("../../classes/DiagnosticService");
const transformExpression_1 = require("../expressions/transformExpression");
const transformIdentifier_1 = require("../expressions/transformIdentifier");
const transformExpressionStatement_1 = require("./transformExpressionStatement");
const transformVariableStatement_1 = require("./transformVariableStatement");
const transformStatementList_1 = require("../transformStatementList");
const createTruthinessChecks_1 = require("../../util/createTruthinessChecks");
const getDeclaredVariables_1 = require("../../util/getDeclaredVariables");
const getStatements_1 = require("../../util/getStatements");
const traversal_1 = require("../../util/traversal");
const typescript_1 = __importDefault(require("typescript"));
function addFinalizersToIfStatement(node, finalizers) {
    if (luau_ast_1.default.list.isNonEmpty(node.statements)) {
        addFinalizers(node.statements, node.statements.head, finalizers);
    }
    if (luau_ast_1.default.list.isList(node.elseBody)) {
        if (luau_ast_1.default.list.isNonEmpty(node.elseBody)) {
            addFinalizers(node.elseBody, node.elseBody.head, finalizers);
        }
    }
    else {
        addFinalizersToIfStatement(node.elseBody, finalizers);
    }
}
function addFinalizers(list, node, finalizers) {
    (0, assert_1.assert)(!luau_ast_1.default.list.isEmpty(list));
    const statement = node.value;
    if (luau_ast_1.default.isContinueStatement(statement)) {
        const finalizersClone = luau_ast_1.default.list.clone(finalizers);
        luau_ast_1.default.list.forEach(finalizersClone, node => (node.parent = statement.parent));
        if (node.prev) {
            node.prev.next = finalizersClone.head;
        }
        else if (node === list.head) {
            list.head = finalizersClone.head;
        }
        node.prev = finalizersClone.tail;
        finalizersClone.tail.next = node;
    }
    if (luau_ast_1.default.isDoStatement(statement)) {
        if (luau_ast_1.default.list.isNonEmpty(statement.statements)) {
            addFinalizers(statement.statements, statement.statements.head, finalizers);
        }
    }
    else if (luau_ast_1.default.isIfStatement(statement)) {
        addFinalizersToIfStatement(statement, finalizers);
    }
    if (node.next) {
        addFinalizers(list, node.next, finalizers);
    }
}
function canSkipClone(state, initializer, id) {
    return !typescript_1.default.FindAllReferences.Core.isSymbolReferencedInFile(id, state.typeChecker, id.getSourceFile(), initializer);
}
function isIdWriteOrAsyncRead(state, forStatement, id) {
    return typescript_1.default.FindAllReferences.Core.eachSymbolReferenceInFile(id, state.typeChecker, id.getSourceFile(), token => {
        if (typescript_1.default.isWriteAccess(token) &&
            (!forStatement.incrementor || !(0, traversal_1.isAncestorOf)(forStatement.incrementor, token))) {
            return true;
        }
        const ancestor = (0, traversal_1.getAncestor)(token, v => v === forStatement || typescript_1.default.isFunctionLike(v));
        if (ancestor && ancestor !== forStatement) {
            return true;
        }
    }, forStatement);
}
function transformForStatement(state, node) {
    const { initializer, condition, incrementor, statement } = node;
    const result = luau_ast_1.default.list.make();
    const whileStatements = luau_ast_1.default.list.make();
    const finalizerStatements = luau_ast_1.default.list.make();
    const variables = initializer && typescript_1.default.isVariableDeclarationList(initializer) ? (0, getDeclaredVariables_1.getDeclaredVariables)(initializer) : [];
    const hasWriteOrAsyncRead = new Set();
    const skipClone = new Set();
    if (initializer && typescript_1.default.isVariableDeclarationList(initializer)) {
        for (const id of variables) {
            const symbol = state.typeChecker.getSymbolAtLocation(id);
            (0, assert_1.assert)(symbol);
            if (isIdWriteOrAsyncRead(state, node, id)) {
                hasWriteOrAsyncRead.add(symbol);
            }
            if (canSkipClone(state, initializer, id)) {
                skipClone.add(symbol);
            }
        }
    }
    if (initializer) {
        if (typescript_1.default.isVariableDeclarationList(initializer)) {
            if ((0, transformVariableStatement_1.isVarDeclaration)(initializer)) {
                DiagnosticService_1.DiagnosticService.addDiagnostic(diagnostics_1.errors.noVar(node));
            }
            for (const id of variables) {
                const symbol = state.typeChecker.getSymbolAtLocation(id);
                (0, assert_1.assert)(symbol);
                if (hasWriteOrAsyncRead.has(symbol)) {
                    if (skipClone.has(symbol)) {
                        state.symbolToIdMap.set(symbol, luau_ast_1.default.tempId(id.getText()));
                    }
                    else {
                        const copyId = luau_ast_1.default.tempId(`${id.getText()}Copy`);
                        state.symbolToIdMap.set(symbol, copyId);
                    }
                }
            }
            for (const declaration of initializer.declarations) {
                const [decStatements, decPrereqs] = state.capture(() => {
                    const result = luau_ast_1.default.list.make();
                    const [decStatements, decPrereqs] = state.capture(() => (0, transformVariableStatement_1.transformVariableDeclaration)(state, declaration));
                    luau_ast_1.default.list.pushList(result, decPrereqs);
                    luau_ast_1.default.list.pushList(result, decStatements);
                    return result;
                });
                luau_ast_1.default.list.pushList(result, decPrereqs);
                luau_ast_1.default.list.pushList(result, decStatements);
            }
            for (const id of variables) {
                const symbol = state.typeChecker.getSymbolAtLocation(id);
                (0, assert_1.assert)(symbol);
                if (hasWriteOrAsyncRead.has(symbol)) {
                    let tempId;
                    if (skipClone.has(symbol)) {
                        tempId = state.symbolToIdMap.get(symbol);
                        (0, assert_1.assert)(tempId);
                    }
                    else {
                        tempId = luau_ast_1.default.tempId(id.getText());
                        const copyId = state.symbolToIdMap.get(symbol);
                        (0, assert_1.assert)(copyId);
                        luau_ast_1.default.list.push(result, luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.VariableDeclaration, {
                            left: tempId,
                            right: copyId,
                        }));
                    }
                    state.symbolToIdMap.delete(symbol);
                    const realId = (0, transformIdentifier_1.transformIdentifierDefined)(state, id);
                    luau_ast_1.default.list.push(whileStatements, luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.VariableDeclaration, {
                        left: realId,
                        right: tempId,
                    }));
                    luau_ast_1.default.list.push(finalizerStatements, luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.Assignment, {
                        left: tempId,
                        operator: "=",
                        right: realId,
                    }));
                }
            }
        }
        else {
            const [statements, prereqs] = state.capture(() => (0, transformExpressionStatement_1.transformExpressionStatementInner)(state, initializer));
            luau_ast_1.default.list.pushList(result, prereqs);
            luau_ast_1.default.list.pushList(result, statements);
        }
    }
    if (incrementor) {
        const shouldIncrement = luau_ast_1.default.tempId("shouldIncrement");
        luau_ast_1.default.list.push(result, luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.VariableDeclaration, {
            left: shouldIncrement,
            right: luau_ast_1.default.bool(false),
        }));
        const incrementorStatements = luau_ast_1.default.list.make();
        const [statements, prereqs] = state.capture(() => (0, transformExpressionStatement_1.transformExpressionStatementInner)(state, incrementor));
        luau_ast_1.default.list.pushList(incrementorStatements, prereqs);
        luau_ast_1.default.list.pushList(incrementorStatements, statements);
        luau_ast_1.default.list.push(whileStatements, luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.IfStatement, {
            condition: shouldIncrement,
            statements: incrementorStatements,
            elseBody: luau_ast_1.default.list.make(luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.Assignment, {
                left: shouldIncrement,
                operator: "=",
                right: luau_ast_1.default.bool(true),
            })),
        }));
    }
    let [conditionExp, conditionPrereqs] = state.capture(() => {
        if (condition) {
            return (0, createTruthinessChecks_1.createTruthinessChecks)(state, (0, transformExpression_1.transformExpression)(state, condition), condition);
        }
        else {
            return luau_ast_1.default.bool(true);
        }
    });
    luau_ast_1.default.list.pushList(whileStatements, conditionPrereqs);
    if (!luau_ast_1.default.list.isEmpty(whileStatements)) {
        if (condition) {
            luau_ast_1.default.list.push(whileStatements, luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.IfStatement, {
                condition: luau_ast_1.default.unary("not", conditionExp),
                statements: luau_ast_1.default.list.make(luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.BreakStatement, {})),
                elseBody: luau_ast_1.default.list.make(),
            }));
        }
        conditionExp = luau_ast_1.default.bool(true);
    }
    luau_ast_1.default.list.pushList(whileStatements, (0, transformStatementList_1.transformStatementList)(state, (0, getStatements_1.getStatements)(statement)));
    if (luau_ast_1.default.list.isNonEmpty(whileStatements) && luau_ast_1.default.list.isNonEmpty(finalizerStatements)) {
        addFinalizers(whileStatements, whileStatements.head, finalizerStatements);
    }
    if (!whileStatements.tail || !luau_ast_1.default.isFinalStatement(whileStatements.tail.value)) {
        luau_ast_1.default.list.pushList(whileStatements, finalizerStatements);
    }
    luau_ast_1.default.list.push(result, luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.WhileStatement, {
        condition: conditionExp,
        statements: whileStatements,
    }));
    return result.head === result.tail
        ? result
        : luau_ast_1.default.list.make(luau_ast_1.default.create(luau_ast_1.default.SyntaxKind.DoStatement, { statements: result }));
}
exports.transformForStatement = transformForStatement;
//# sourceMappingURL=transformForStatement.js.map